// Generated by gencpp from file kortex_driver/InverseRequest.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_INVERSEREQUEST_H
#define KORTEX_DRIVER_MESSAGE_INVERSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct InverseRequest_
{
  typedef InverseRequest_<ContainerAllocator> Type;

  InverseRequest_()
    : x_position(0.0)
    , y_position(0.0)
    , z_position(0.0)  {
    }
  InverseRequest_(const ContainerAllocator& _alloc)
    : x_position(0.0)
    , y_position(0.0)
    , z_position(0.0)  {
  (void)_alloc;
    }



   typedef double _x_position_type;
  _x_position_type x_position;

   typedef double _y_position_type;
  _y_position_type y_position;

   typedef double _z_position_type;
  _z_position_type z_position;





  typedef boost::shared_ptr< ::kortex_driver::InverseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::InverseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct InverseRequest_

typedef ::kortex_driver::InverseRequest_<std::allocator<void> > InverseRequest;

typedef boost::shared_ptr< ::kortex_driver::InverseRequest > InverseRequestPtr;
typedef boost::shared_ptr< ::kortex_driver::InverseRequest const> InverseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::InverseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::InverseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::InverseRequest_<ContainerAllocator1> & lhs, const ::kortex_driver::InverseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x_position == rhs.x_position &&
    lhs.y_position == rhs.y_position &&
    lhs.z_position == rhs.z_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::InverseRequest_<ContainerAllocator1> & lhs, const ::kortex_driver::InverseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::InverseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::InverseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::InverseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::InverseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::InverseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::InverseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::InverseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a65f5a0cdef54b2e1dbb78f7873209a";
  }

  static const char* value(const ::kortex_driver::InverseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a65f5a0cdef54b2ULL;
  static const uint64_t static_value2 = 0xe1dbb78f7873209aULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::InverseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/InverseRequest";
  }

  static const char* value(const ::kortex_driver::InverseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::InverseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_position\n"
"float64 y_position\n"
"float64 z_position\n"
;
  }

  static const char* value(const ::kortex_driver::InverseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::InverseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_position);
      stream.next(m.y_position);
      stream.next(m.z_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InverseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::InverseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::InverseRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "x_position: ";
    Printer<double>::stream(s, indent + "  ", v.x_position);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y_position: ";
    Printer<double>::stream(s, indent + "  ", v.y_position);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "z_position: ";
    Printer<double>::stream(s, indent + "  ", v.z_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_INVERSEREQUEST_H
