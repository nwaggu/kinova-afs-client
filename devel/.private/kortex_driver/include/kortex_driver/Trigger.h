// Generated by gencpp from file kortex_driver/Trigger.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_TRIGGER_H
#define KORTEX_DRIVER_MESSAGE_TRIGGER_H

#include <ros/service_traits.h>


#include <kortex_driver/TriggerRequest.h>
#include <kortex_driver/TriggerResponse.h>


namespace kortex_driver
{

struct Trigger
{

typedef TriggerRequest Request;
typedef TriggerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Trigger
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::Trigger > {
  static const char* value()
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const ::kortex_driver::Trigger&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::Trigger > {
  static const char* value()
  {
    return "kortex_driver/Trigger";
  }

  static const char* value(const ::kortex_driver::Trigger&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::TriggerRequest> should match
// service_traits::MD5Sum< ::kortex_driver::Trigger >
template<>
struct MD5Sum< ::kortex_driver::TriggerRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::Trigger >::value();
  }
  static const char* value(const ::kortex_driver::TriggerRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::TriggerRequest> should match
// service_traits::DataType< ::kortex_driver::Trigger >
template<>
struct DataType< ::kortex_driver::TriggerRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::Trigger >::value();
  }
  static const char* value(const ::kortex_driver::TriggerRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::TriggerResponse> should match
// service_traits::MD5Sum< ::kortex_driver::Trigger >
template<>
struct MD5Sum< ::kortex_driver::TriggerResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::Trigger >::value();
  }
  static const char* value(const ::kortex_driver::TriggerResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::TriggerResponse> should match
// service_traits::DataType< ::kortex_driver::Trigger >
template<>
struct DataType< ::kortex_driver::TriggerResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::Trigger >::value();
  }
  static const char* value(const ::kortex_driver::TriggerResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_TRIGGER_H
