// Generated by gencpp from file kortex_driver/Inverse.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_INVERSE_H
#define KORTEX_DRIVER_MESSAGE_INVERSE_H

#include <ros/service_traits.h>


#include <kortex_driver/InverseRequest.h>
#include <kortex_driver/InverseResponse.h>


namespace kortex_driver
{

struct Inverse
{

typedef InverseRequest Request;
typedef InverseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Inverse
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::Inverse > {
  static const char* value()
  {
    return "1652b6a55b9608f7a5bbc015e95332ff";
  }

  static const char* value(const ::kortex_driver::Inverse&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::Inverse > {
  static const char* value()
  {
    return "kortex_driver/Inverse";
  }

  static const char* value(const ::kortex_driver::Inverse&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::InverseRequest> should match
// service_traits::MD5Sum< ::kortex_driver::Inverse >
template<>
struct MD5Sum< ::kortex_driver::InverseRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::Inverse >::value();
  }
  static const char* value(const ::kortex_driver::InverseRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::InverseRequest> should match
// service_traits::DataType< ::kortex_driver::Inverse >
template<>
struct DataType< ::kortex_driver::InverseRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::Inverse >::value();
  }
  static const char* value(const ::kortex_driver::InverseRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::InverseResponse> should match
// service_traits::MD5Sum< ::kortex_driver::Inverse >
template<>
struct MD5Sum< ::kortex_driver::InverseResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::Inverse >::value();
  }
  static const char* value(const ::kortex_driver::InverseResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::InverseResponse> should match
// service_traits::DataType< ::kortex_driver::Inverse >
template<>
struct DataType< ::kortex_driver::InverseResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::Inverse >::value();
  }
  static const char* value(const ::kortex_driver::InverseResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_INVERSE_H
