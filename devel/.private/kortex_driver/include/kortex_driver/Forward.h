// Generated by gencpp from file kortex_driver/Forward.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_FORWARD_H
#define KORTEX_DRIVER_MESSAGE_FORWARD_H

#include <ros/service_traits.h>


#include <kortex_driver/ForwardRequest.h>
#include <kortex_driver/ForwardResponse.h>


namespace kortex_driver
{

struct Forward
{

typedef ForwardRequest Request;
typedef ForwardResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Forward
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::Forward > {
  static const char* value()
  {
    return "4a65f5a0cdef54b2e1dbb78f7873209a";
  }

  static const char* value(const ::kortex_driver::Forward&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::Forward > {
  static const char* value()
  {
    return "kortex_driver/Forward";
  }

  static const char* value(const ::kortex_driver::Forward&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::ForwardRequest> should match
// service_traits::MD5Sum< ::kortex_driver::Forward >
template<>
struct MD5Sum< ::kortex_driver::ForwardRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::Forward >::value();
  }
  static const char* value(const ::kortex_driver::ForwardRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::ForwardRequest> should match
// service_traits::DataType< ::kortex_driver::Forward >
template<>
struct DataType< ::kortex_driver::ForwardRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::Forward >::value();
  }
  static const char* value(const ::kortex_driver::ForwardRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::ForwardResponse> should match
// service_traits::MD5Sum< ::kortex_driver::Forward >
template<>
struct MD5Sum< ::kortex_driver::ForwardResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::Forward >::value();
  }
  static const char* value(const ::kortex_driver::ForwardResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::ForwardResponse> should match
// service_traits::DataType< ::kortex_driver::Forward >
template<>
struct DataType< ::kortex_driver::ForwardResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::Forward >::value();
  }
  static const char* value(const ::kortex_driver::ForwardResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_FORWARD_H
